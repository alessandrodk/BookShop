<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BookShop.Api</name>
    </assembly>
    <members>
        <member name="M:BookShop.Api.Controllers.AuthorsController.Post(BookShop.Core.Models.Authors.AuthorRequestModel)">
            <summary>
            Creates a new author with first name and last name.
            </summary>
            <param name="model">The first and last name of the author (mandatory).</param>
            <returns>A model of the new author.</returns>
            <response code="200">An author was created successfully.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.AuthorsController.Get(System.Int32)">
            <summary>
            Gets author with id, first name, last name and a list of all his/her book titles.
            </summary>
            <param name="id">The ID of the author.</param>
            <returns>A author model.</returns>
            <response code="200">If there is author.</response>
            <response code="404">If there isn't such author .</response>
        </member>
        <member name="M:BookShop.Api.Controllers.AuthorsController.GetAuthorBooks(System.Int32)">
            <summary>
            Gets books from author by id. Returns all data about the book + category names.
            </summary>
            <param name="id">The ID of the author.</param>
            <returns>Books with categories model.</returns>
            <response code="200">If there are books from author.</response>
            <response code="404">If there are no books from author.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.CategoriesController.Post(BookShop.Core.Models.Categories.CategoryRequestModel)">
            <summary>
            Adds a new category.
            </summary>
            <param name="model">The name of the category.</param>
            <returns>A model of the new category.</returns>
            <response code="201">A category was created successfully.</response>
            <response code="400">Already existing category.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.CategoriesController.Get">
            <summary>
            Gets all categories.
            </summary>
            <returns>A collection of categories.</returns>
            <response code="200">If there are categories.</response>
            <response code="404">If no category exists.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.CategoriesController.Get(System.Int32)">
            <summary>
            Gets a category.
            </summary>
            <param name="id">The ID of the category.</param>
            <returns>A category model.</returns>
            <response code="200">If there is category.</response>
            <response code="404">If there isn't such category .</response>
        </member>
        <member name="M:BookShop.Api.Controllers.CategoriesController.Put(BookShop.Core.Models.Categories.CategoryServiceModel)">
            <summary>
            Edits a category name.
            </summary>
            <param name="model">Id and new name of the category.</param>
            <returns>A model of the new category.</returns>
            <response code="200">A category was updated successfully.</response>
            <response code="400">Already existing category name or invalid id.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.CategoriesController.Delete(System.Int32)">
            <summary>
            Deletes a category.
            </summary>
            <param name="id">The ID of the category.</param>
            <returns>Success/Error message.</returns>
            <response code="200">If successfully deleted.</response>
            <response code="404">If there isn't such category.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.OptionController.Get(Optional.Option{System.String},Optional.Option{System.Int32},Optional.Option{System.Boolean})">
            <summary>
            Demonstrates the Option model binding with query string parameters. Cannot be tested from the Swagger UI.
            </summary>
            <param name="text">A string query parameter.</param>
            <param name="number">A number query parameter.</param>
            <param name="flag">A boolean query parameter.</param>
            <returns>A model showing the bound data.</returns>
            <response code="200">The model was bound successfully.</response>
            <response code="400">When it could not parse some of the inputted data.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.UsersController.Login(BookShop.Core.Models.LoginUserModel)">
            <summary>
            Login.
            </summary>
            <param name="model">The credentials.</param>
            <returns>A JWT token.</returns>
            <response code="200">If the credentials have a match.</response>
            <response code="400">If the credentials don't match/don't meet the requirements.</response>
        </member>
        <member name="M:BookShop.Api.Controllers.UsersController.Register(BookShop.Core.Models.RegisterUserModel)">
            <summary>
            Register.
            </summary>
            <param name="model">The user model.</param>
            <returns>A user model.</returns>
            <response code="201">A user was created.</response>
            <response code="400">Invalid input.</response>
        </member>
    </members>
</doc>
